plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.31'
    id 'org.jetbrains.dokka' version '1.5.0'
    id 'org.jlleitschuh.gradle.ktlint' version '10.1.0'
    id 'java-library'
    id 'java'
    id 'maven-publish'
}

version = System.getenv('VERSION') ?: 'latest'

group = 'com.hydra-billing'


dependencyLocking {
    lockAllConfigurations()
    lockMode = LockMode.STRICT
}

repositories {
    mavenCentral()
}

publishing {
    publications {

        maven(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            name 'nexus'
            url 'https://maven.dl.latera.ru/'

            credentials {
                username System.getenv('NEXUS_USERNAME')
                password System.getenv('NEXUS_PASSWORD')
            }
        }
    }
}

ktlint {
    disabledRules = ["no-wildcard-imports"]
}

dependencies {
    api "org.jetbrains.kotlin:kotlin-stdlib"
    api "io.ktor:ktor-client:1.5.1"
    api "io.ktor:ktor-client-gson:1.5.1"
    api "io.ktor:ktor-client-json:1.5.1"
    api "io.ktor:ktor-client-apache:1.5.1"
    api "io.ktor:ktor-client-auth-basic:1.5.1"
    api "io.ktor:ktor-client-mock:1.5.1"
    api "com.google.code.gson:gson:2.8.6"
    api "org.jetbrains.kotlin:kotlin-reflect:1.4.31"

    api "org.slf4j:slf4j-api:1.7.30"
    api "ch.qos.logback:logback-classic:1.2.3"
    api "ch.qos.logback:logback-core:1.2.3"

    api 'com.fasterxml.jackson.core:jackson-databind:2.12.6'
    api 'com.fasterxml.jackson.module:jackson-module-kotlin:2.12.6'
    api 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.12.6'

    compileOnly 'javax.servlet:javax.servlet-api:3.1.0'
    compileOnly "org.camunda.bpm:camunda-bom:7.14.0"
    compileOnly "org.camunda.bpm:camunda-engine:7.14.0"
    compileOnly "org.camunda.bpm:camunda-engine-rest:7.14.0"
    compileOnly "org.camunda.bpm.webapp:camunda-webapp:7.14.0"

    runtimeOnly "org.jetbrains.kotlin:kotlin-script-runtime:1.4.31"

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.0"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:5.7.0"
    testImplementation "org.assertj:assertj-core:3.18.1"
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true

    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor.getDisplayName())
    }

    maxParallelForks = 4

    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }
}

task copyDependencies(type: Copy) {
    into "lib"
    from configurations.runtimeClasspath
}

tasks.named("dokkaGfm") {
    outputDirectory.set(file("$buildDir/../../docs"))
}

tasks.matching { ['test', 'build'].contains(it.name)}.all { Task task ->
     task.dependsOn ktlintCheck
}
